// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210806.1

#pragma once
#ifndef WINRT_CustomEncryption_0_H
#define WINRT_CustomEncryption_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Markup
{
    struct IXamlMetadataProvider;
}
WINRT_EXPORT namespace winrt::CustomEncryption
{
    struct IMainWindow;
    struct MainWindow;
    struct XamlMetaDataProvider;
}
namespace winrt::impl
{
    template <> struct category<winrt::CustomEncryption::IMainWindow>{ using type = interface_category; };
    template <> struct category<winrt::CustomEncryption::MainWindow>{ using type = class_category; };
    template <> struct category<winrt::CustomEncryption::XamlMetaDataProvider>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::CustomEncryption::MainWindow> = L"CustomEncryption.MainWindow";
    template <> inline constexpr auto& name_v<winrt::CustomEncryption::XamlMetaDataProvider> = L"CustomEncryption.XamlMetaDataProvider";
    template <> inline constexpr auto& name_v<winrt::CustomEncryption::IMainWindow> = L"CustomEncryption.IMainWindow";
    template <> inline constexpr guid guid_v<winrt::CustomEncryption::IMainWindow>{ 0x2F5FFEA4,0x5813,0x5A9B,{ 0x88,0xBA,0xE6,0xC7,0x6A,0xFF,0xE2,0xBF } }; // 2F5FFEA4-5813-5A9B-88BA-E6C76AFFE2BF
    template <> struct default_interface<winrt::CustomEncryption::MainWindow>{ using type = winrt::CustomEncryption::IMainWindow; };
    template <> struct default_interface<winrt::CustomEncryption::XamlMetaDataProvider>{ using type = winrt::Microsoft::UI::Xaml::Markup::IXamlMetadataProvider; };
    template <> struct abi<winrt::CustomEncryption::IMainWindow>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_CustomEncryption_IMainWindow
    {
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MyProperty() const;
        WINRT_IMPL_AUTO(void) MyProperty(int32_t value) const;
    };
    template <> struct consume<winrt::CustomEncryption::IMainWindow>
    {
        template <typename D> using type = consume_CustomEncryption_IMainWindow<D>;
    };
}
#endif
